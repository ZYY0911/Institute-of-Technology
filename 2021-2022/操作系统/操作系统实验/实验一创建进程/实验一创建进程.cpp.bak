// 实验一创建进程.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <windows.h>
#include <iostream>
#include <stdio.h>

// 创建传递过来的进程的克隆进程并赋于其ID值
void StartClone(int nCloneID)
{
	
    // 提取用于可执行文件的文件名
    TCHAR szFilename[MAX_PATH] ;
    :: GetModuleFileName(
		          NULL, //一个模块的句柄。模块句柄跟一般的句柄不一样，模块句柄指向的就是EXE和DLL等在内存的位置。
		                //该参数可以是一个DLL模块，
				            //或者是一个应用程序的实例句柄。
                    //如果该参数为NULL，该函数返回该应用程序全路径。
				  szFilename,
				  MAX_PATH) ;
   
    // 格式化用于子进程的命令行并通知其EXE文件名和克隆ID
    TCHAR szCmdLine[MAX_PATH];
	  :: sprintf(szCmdLine,"\"%s\"%d",szFilename,nCloneID);
	  
	  // 用于子进程的STARTUPINFO结构
    STARTUPINFO si;
    :: ZeroMemory(reinterpret_cast <void*> (&si) , sizeof(si) ) ;
    si.cb = sizeof(si) ;				// 必须是本结构的大小
    // 返回的用于子进程的进程信息
    PROCESS_INFORMATION pi;
    
    // 利用同样的可执行文件和命令行创建进程，并赋于其子进程的性质
    BOOL bCreateOK=::CreateProcess(
        szFilename,					// 产生这个EXE的应用程序的名称
        szCmdLine,					// 指向一个以NULL结尾的字符串，该字符串指定要执行的命令行。
        NULL,						    // 缺省的进程安全性
        NULL,						    // 缺省的线程安全性
        FALSE,					  	// 不继承句柄
        CREATE_NEW_CONSOLE,	// 使用新的控制台
        NULL,						    // 新的环境
        NULL,						    // 当前目录
        &si,						    // 启动信息
        &pi) ;					 	  // 返回的进程信息
   
    //不使用的句柄最好关掉
    if (bCreateOK)
    {
        :: CloseHandle(pi.hProcess) ;
        :: CloseHandle(pi.hThread) ;
    }
}

int main(int argc, char* argv[] )
{
    // 确定进程在列表中的克隆ID
    int nClone(0) ;
    
    //第一个进程argc为1，以后每个进程命令行有两个参数，
    //其中第二个是克隆ID。
    if (argc > 1)
    {
        // 从第二个参数中提取克隆ID
        :: sscanf(argv[1] , "%d" , &nClone) ;
    }
    
    // 显示进程的克隆ID
    std :: cout << "Process ID:" << :: GetCurrentProcessId()
                << ", Clone ID:" << nClone
                << std :: endl;
    
    // 检查是否有创建子进程的需要
    const int c_nCloneMax=25;
    if (nClone < c_nCloneMax)
    {
        // 创建新进程,其nClone为1-25
		    :: Sleep(6000) ;
        StartClone(++nClone) ;
    }
    
    // 在终止之前暂停一下，输入一个字符后，程序结束，以便观察
    std::cout<<"input a char:";
    getchar();
    std::cout<<"I'm stopped ... Bye-Bye";
    :: Sleep(1000) ;
    return 0;
}

/*
思考题：
1、运行后在系统任务管理器中查看所创建进程映像名，有什么规律？
2、克隆ID是如何在不同进程间传递的？
*/

